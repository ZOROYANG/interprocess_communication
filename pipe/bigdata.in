michile
导航
博客园
首页
新随笔
联系
订阅订阅
管理
<	2016年5月	>
日	一	二	三	四	五	六
24	25	26	27	28	29	30
1	2	3	4	5	6	7
8	9	10	11	12	13	14
15	16	17	18	19	20	21
22	23	24	25	26	27	28
29	30	31	1	2	3	4
公告
昵称：michile
园龄：4年5个月
粉丝：5
关注：5
+加关注
统计
随笔 - 61
文章 - 1
评论 - 4
引用 - 0
搜索

 找找看

 谷歌搜索
常用链接
我的随笔
我的评论
我的参与
最新评论
我的标签
随笔分类
SoC FPGA 学习
SOPC(4)
uCOS
随笔档案
2015年12月 (1)
2015年6月 (1)
2015年5月 (1)
2013年9月 (1)
2013年2月 (52)
2013年1月 (1)
2012年6月 (1)
2011年12月 (1)
2011年11月 (2)
最新评论
1. Re:关于 nios II的串口打印
@Anson_Arie不好意思。回复晚了，刚好最近有个项目是用到你 nios II uart的信息，我也用到这段代码，不过有些改动！ 我的上位机发送信号指令后，nios II根据指令类型进行动作。这个......
--michile
2. Re:关于 nios II的串口打印
你好，我也遇到你的问题了，发送的数据有丢失和乱码，是哪块设置的问题呢？你找到解决办法了吗？
--Anson_Arie
3. Re:管道编程
关于popen返回值的如下描述，希望您详细解答下：文中提到“如果第二个参数是"r"，函数会返回子进程的标准输出流以便父进程读取子进程的输出。如果第二个参数是"w" ，函数返回子进程的标准输入流一边父进......
--凤儿
4. Re:关于 nios II的串口打印
alt_u8 Uart_Send_Byte(alt_u8 data函数中，while((IORD_ALTERA_AVALON_UART_STATUS(UART_BASE)&0x40)==1); ......
--FPGA狂热者
阅读排行榜
1. linux libjpeg 安装(5957)
2. 套接字编程(5214)
3. 管道编程(2677)
4. shell 中调用其他的脚本(2315)
5. ubuntu proxy(1726)
评论排行榜
1. 关于 nios II的串口打印(3)
2. 管道编程(1)
管道编程

管道是一个允许单向信息传递的通信设备。从管道“写入端”写入的数据可以从“读取
端”读回。管道是一个串行设备；从管道中读取的数据总保持它们被写入时的顺序。一般来
说，管道通常用于一个进程中两个线程之间的通信，或用于父子进程之间的通信。 
在shell 中，| 符号用于创建一个管道。例如，下面的程序会使 shell 创建两个子进程，
一个运行ls而一个运行less： 
% ls | less 
Shell同时还会创建一个管道，将运行 ls的子进程的标准输出连接到运行less 的子进
程的标准输入。由ls输出的文件名将被按照与发送到终端时完全相同的顺序发送到less
的标准输入。 
管道的数据容量是有限的。如果写入的进程写入数据的速度比读取进程消耗数据的速

更快，且管道无法容纳更多数据的时候，写入端的进程将被阻塞，直到管道中出现更多的空
间为止。换言之，管道可以自动同步两个进程。 

5.4.1 创建管道 
要创建一个管道，请调用 pipe 命令。提供一个包含两个 int 值的数组作为参数。Pipe
命令会将读取端文件描述符保存在数组的第0 个元素而将写入端文件描述符保存在第 1 个
元素中。举个例子，考虑如下代码： 
int pipe_fds[2]; 
int read_fd; 
int write_fd; 

pipe (pipe_fds); 
read_fd = pipe_fds[0]; 
write_fd = pipe_fds[1]; 

对文件描述符write_fd 写入的数据可以从read_fd中读回。 
5.4.2 父子进程之间的通信 
通过调用pipe 得到的文件描述符只在调用进程及子进程中有效。一个进程中的文件描
述符不能传递给另一个无关进程；不过，当这个进程调用 fork 的时候，文件描述符将复制
给新创建的子进程。因此，管道只能用于连接相关的进程。 
列表5.7中的程序中，fork 产生了一个子进程。子进程继承了指向管道的文件描述符。
父进程向管道写入一个字符串，然后子进程将字符串读出。实例程序将文件描述符利用
fdopen 函数转换为FILE *流。因为我们使用文件流而不是文件描述符，我们可以使用包括
printf 和scanf 在内的标准C 库提供的高级 I/O 函数。 

代码列表 5.7 （pipe.c）通过管道与子进程通信 

#include <stdlib.h> 
#include <stdio.h> 
#include <unistd.h> 

/* 将 COUNT 份 MESSAGE 的副本写入 STREAM，每次写入之后暂停 1 秒钟 */ 

void writer (const char* message, int count, FILE* stream) 
{ 
for (; count > 0; --count) { 
/* 将消息写入流，然后立刻发送 */ 
fprintf (stream, "%s\n", message); 
fflush (stream); 
/* 休息，休息一会儿 */ 
sleep (1); 

}

} 

/* 从流中读取尽可能多的随机字符串 */ 

void reader (FILE* stream) 
{ 
char buffer[1024]; 
/* 从流中读取直到流结束。 fgets 会不断读取直到遇见换行或文件结束符。 */ 
while (!feof (stream) 
&& !ferror (stream) 
&& fgets (buffer, sizeof (buffer), stream) != NULL) 
fputs (buffer, stdout); 
} 

int main () 
{ 
int fds[2]; 
pid_t pid; 

/* 创建一个管道。代表管道两端的文件描述符将被放置在 fds 中。*/ 
pipe (fds); 
/* 创建子进程。*/ 
pid = fork (); 
if (pid == (pid_t) 0) { 
FILE* stream; 
/* 这里是子进程。关闭我们得到的写入端文件描述符副本。*/ 
close (fds[1]); 
/* 将读取端文件描述符转换为一个 FILE 对象然后从中读取消息 */ 
stream = fdopen (fds[0], "r"); 
reader (stream); 
close (fds[0]); 
} 
clse { 
/* 这是父进程。*/ 
FILE* stream; 
/* 关闭我们的读取端文件描述符副本。*/ 
close (fds[0]); 
/* 将写入端文件描述符转换为一个 FILE 对象然后写入数据。*/ 
stream = fdopen (fds[1], "w"); 
writer ("Hello, world.", 5, stream); 
close (fds[1]); 
} 

return 0;

}

在 main 函数开始的时候，fds 被声明为一个包含两个整型变量的数组。对 pipe 的调
用创建了一个管道，并将读写两个文件描述符存放在这个数组中。程序随后创建一个子进程。
在关闭了管道的读取端之后，父进程开始向管道写入字符串。而在关闭了管道的写入端之后，
子进程开始从管道读取字符串。 
注意，在writer 函数中，父进程在每次写入操作之后通过调用fflush 刷新管道内容。
否则，字符串可能不会立刻被通过管道发送出去。 
当你调用ls | less 这个命令的时候会出现两次fork 过程：一次为ls创建子进程，
一次为less 创建子进程。两个进程都继承了这些指向管道的文件描述符，因此它们可以通
过管道进行通信。如果希望不相关的进程互相通信，应该用FIFO 代替管道。FIFO 将在5.4.5
节“FIFO”中进行介绍。 
5.4.3 重定向标准输入、输出和错误流 
你可能经常希望创建一个子进程，并将一个管道的一端设置为它的标准输入或输出。利
用dup2 系统调用你可以使一个文件描述符等效于另外一个。例如，下面的命令可以将一个
进程的标准输入重定向到文件描述符fd： 
dup2 (fd, STDIN_FILENO); 
符号常量STDIN_FILENO 代表指向标准输入的文件描述符。它的值为 0。这个函数会
关闭标准输入，然后将它作为fd的副本重新打开，从而使两个标识符可以互换使用。 
相互等效的文件描述符之间共享文件访问位置和相同的一组文件状态标志。因此，从
fd中读取的字符不会再次从标志输入中被读取。 
列表5.8 中的程序利用dup2 系统调用将一个管道的输出发送到sort命令当创建了

一个管道之后，程序生成了子进程。父进程向管道中写入一些字符串，而子进程利用dup2
将管道的读取端描述符复制到自己的标准输入，然后执行sort程序。 

代码列表 5.8 （dup2.c ）用 dup2 重定向管道输出 

#include <stdio.h> 
#include <sys/types.h> 
#include <sys/wait.h> 
#include <unistd.h> 

int main () 
{ 
int fds[2]; 
pid_t pid; 

/* 创建管道。标识管道两端的文件描述符会被放置在 fds 中。*/ 
pipe (fds); 
/* 产生子进程。*/ 

pid = fork (); 
if (pid == (pid_t) 0) { 
/* 这里是子进程。关闭我们的写入端描述符。*/ 
close (fds[1]); 
/* 将读取端连接到标准输入*/ 
dup2 (fds[0], STDIN_FILENO); 
/* 用 sort 替换子进程。*/ 
execlp ("sort", "sort", 0); ---？？？？
} 
else { 
/* 这是父进程。*/ 
FILE* stream; 
/* 关闭我们的读取端描述符。*/ 
close (fds[0]); 
/* 将写入端描述符转换为一个 FILE 对象，然后将信息写入。*/ 
stream = fdopen (fds[1], "w"); 
fprintf (stream, "This is a test.\n"); 
fprintf (stream, "Hello, world.\n"); 
fprintf (stream, "My dog has fleas.\n"); 
fprintf (stream, "This program is great.\n"); 
fprintf (stream, "One fish, two fish.\n"); 
fflush (stream); 
close (fds[1]); 
/* 等待子进程结束。*/ 
waitpid (pid, NULL, 0); 
} 

return 0; 
} 

5.4.4 popen 和 pclose 
管道的一个常见用途是与一个在子进程中运行的程序发送和接受数据。而 popen 和
pclose 函数简化了这个过程。它取代了对pipe、fork、dup2、exec 和fdopen 的一系
列调用。 
下面将使用了popen 和pclose 的列表 5.9 与之前一个例子（列表 5.8 ）进行比较。 

代码列表 5.9 （popen.c）使用 popen 的示例 

#include <stdio.h> 
#include <unistd.h> 

int main () 
{

FILE* stream = popen ("sort", "w"); 
fprintf (stream, "This is a test.\n"); 
fprintf (stream, "Hello, world.\n"); 
fprintf (stream, "My dog has fleas.\n"); 
fprintf (stream, "This program is great.\n"); 
fprintf (stream, "One fish, two fish.\n"); 
return pclose (stream); 
} 

通过调用popen 取代 pipe、fork、dup2 和execlp 等，一个子进程被创建以执行了
sort 命令，。第二个参数，” w”，指示出这个进程希望对子进程输出信息。Popen 的返回值
是管道的一端；另外一端连接到了子进程的标准输入。在数据输出结束后，pclose 关闭了
子进程的流，等待子进程结束，然后将子进程的返回值作为函数的返回值返回给调用进程。 
传递给popen 的第一个参数会作为一条shell 命令在一个运行/bin/sh的子进程中执
行。Shell会照常搜索 PAT H 环境变量以寻找应执行的程序。如果第二个参数是"r"，函数会
返回子进程的标准输出流以便父进程读取子进程的输出。如果第二个参数是"w" ，函数返回
子进程的标准输入流一边父进程发送数据。如果出现错误，popen 返回空指针。 
调用pclose 会关闭一个由popen 返回的流。在关闭指定的流之后，pclose 将等待子
进程退出。 
5.4.5 FIFO 
先入先出（first-in, first-out, FIFO）文件是一个在文件系统中有一个名字的管道。任何
进程均可以打开或关闭FIFO；通过 FIFO 连接的进程不需要是彼此关联的。FIFO 也被称为
命名管道。 
可以用mkfifo 命令创建FIFO；通过命令行参数指定FIFO 的路径。例如，运行这个
命令将在/tmp/fifo 创建一个FIFO： 
% mkfifo /tmp/fifo 
% ls -l /tmp/fifo 
prw-rw-rw- 1 samuel users 0 Jan 16 14:04 /tmp/fifo 
ls输出的第一个字符是p，表示这个文件实际是一个FIFO（命名管道）。在一个窗口
中这样从FIFO 中读取内容： 
% cat < /tmp/fifo 
在第二个窗口中这样向 FIFO 中写入内容： 
% cat > /tmp/fifo 
然后输入几行文字。每次你按下回车后，当前一行文字都会经由FIFO 发送到第一个窗
口。通过在第二个窗口中按Ctrl+D关闭这个FIFO。运行下面的命令删除这个 FIFO： 
% rm /tmp/fifo 

创建 FIFO 
通过编程方法创建一个FIFO 需要调用mkfifo 函数。第一个参数是要创建FIFO 的路
径，第二个参数是被创建的 FIFO 的属主、属组和其它用户权限。关于权限，第十章“安全”
的10.3 节“文件系统权限”中进行了介绍。因为管道必然有程序读取信息、有程序写入信
息，因此权限中必须包含读写两种权限。如果无法成功创建管道（如当同名文件已经存在的
时候），mkfifo 返回-1 。当你调用 mkfifo 的时候需要包含<sys/types.h> 和

<sys/stat.h>。 

访问 FIFO 
访问FIFO与访问普通文件完全相同。要通过FIFO通信，必须有一个程序打开这个FIFO
写入信息，而另一个程序打开这个FIFO 读取信息。底层I/O 函数（open、write 、read、
close 等，列举在附录B “底层 I/O ”中）或C 库I/O 函数（fopen 、fprintf、fscanf、
fclose 等）均适用于访问FIFO。 
例如，要利用底层I/O 将一块缓存区的数据写入FIFO 可以这样完成： 
int fd = open (fifo_path, O_WRONLY); 
write (fd, data, data_length); 
close (fd); 

利用C 库I/O 从FIFO 读取一个字符串可以这样做： 
FILE* fifo = fopen (fifo_path, "r"); 
fscanf (fifo, "%s", buffer"); 
fclose (fifo); 

FIFO 可以有多个读取进程和多个写入进程。来自每个写入进程的数据当到达 
PIPE_BUF （Linux 系统中为 4KB ）的时候会自动写入 FIFO。并发写入可能导致数据块的互
相穿插。同步读取也会出现相似的问题。 

与Windows 命名管道的区别 
Win32 操作系统的管道与Linux系统中提供的相当类似。（相关技术细节可以从Win32 库
文档中获得印证。）主要的区别在于，Win32 系统上的命名管道的功能更接近套接字。Win32
命名管道可以用于连接处于同一个网络中不同主机上的不同进程之间相互通信。Linux系统
中，套接字被用于这种情况。同时，Win32 保证同一个命名管道上的多个读——写连接不出
现数据交叉情况，而且管道可以用于双向交流。


 

 

 

 

好文要顶 关注我 收藏该文  
michile
关注 - 5
粉丝 - 5
+加关注
0 0
(请您对文章做出评价)
« 上一篇：映射内存
» 下一篇：套接字编程
posted on 2013-02-07 11:03 michile 阅读(2678) 评论(1) 编辑 收藏

评论

#1楼 2015-03-18 15:16 凤儿  
关于popen返回值的如下描述，希望您详细解答下：
文中提到“如果第二个参数是"r"，函数会返回子进程的标准输出流以便父进程读取子进程的输出。如果第二个参数是"w" ，函数返回子进程的标准输入流一边父进程发送数据 ”

FILE* stream = popen ("sort", "w"); 此句返回的是子进程的标准输入流，即为Pipe命令的读取端文件描流？
支持(0)反对(0)
  
刷新评论刷新页面返回顶部
注册用户登录后才能发表评论，请 登录 或 注册，访问网站首页。
【推荐】50万行VC++源码: 大型组态工控、电力仿真CAD与GIS源码库
【推荐】融云即时通讯云－豆果美食、Faceu等亿级APP都在用
【推荐】怎样将“在线Excel“嵌入你的开发系统中？
【推荐】阿里云高性能云服务器+SSD云盘，让业务响应0延迟

最新IT新闻:
· 让程序员/技术主管/项目经理最可怕的事情是什么？
· 复盘8年前百度虚假医药信息的竞价排名风波
· 调查组公布对武警北京市总队第二医院的调查结果
· 任天堂手机概念设计 美到让人赞不绝口
· 爆：美团10号员工沈鹏创业“水滴互助社群”平台
» 更多新闻...

最新知识库文章:
· 架构漫谈（九）：理清技术、业务和架构的关系
· 架构漫谈（八）：从架构的角度看如何写好代码
· 架构漫谈（七）：不要空设架构师这个职位，给他实权
· 架构漫谈（六）：软件架构到底是要解决什么问题？
· 架构漫谈（五）：什么是软件
» 更多知识库文章...
Powered by: 
博客园 
Copyright © michile

到百度首页
百度一下
百度首页设置登录
网页新闻贴吧知道音乐图片视频地图文库更多»
相关程序设计语言

perl


c


select


c++

展开相关术语

管道通信


命名管道


共享内存


系统调用

展开相关函数

memset


freopen


cstring


time.h

给百度提建议
收起工具时间不限所有网页和文件站点内检索
搜索工具百度为您找到相关结果约3,190,000个
管道编程 - michile - 博客园
2013年2月7日 - 管道编程 管道是一个允许单向信息传递的通信设备。从管道“写入端”写入的数据可以从“读取端”读回。管道是一个串行设备;从管道中读取的数据总保持它...
www.cnblogs.com/michil...  - 百度快照 - 93%好评
为您推荐：linux 管道输出fgets 管道控制台非阻塞读取
Linux下的管道编程技术 - C++ Coder - C++博客
2013年1月7日 - 四、管道编程技术 在程序中利用管道进行通信时,根据通信主体大体可以分为两种情况:一种是具有共同祖先的进程间的通信,比较简单;另一种是任意进程间通...
www.cppblog.com/jackdo...  - 百度快照 - 67%好评
c/c++ 管道编程_漠北_新浪博客
2011年5月28日 - c/c++ 管道编程(2011-05-28 11:38:02) 转载▼标签: 管道 句柄 进程 创建 函数 it 分类: programming 概述 管道(Pipe)实际是用于进程间通信的一段共享...
blog.sina.com.cn/s/blo...  - 百度快照 - 88%好评
MFC命名管道编程_百度知道
1个回答 - 提问时间: 2013年12月20日
命名管道可以是互联网的两个进程通信,匿名管道才是本机进程通信。 参考这篇文章嘛,讲解很详细,看完应该就会了: http://www.cnblogs.com/BoyXiao/archive/2011/...
zhidao.baidu.com/link?...  - 79%好评
Linux C 管道编程 问题	1个回答	2015-04-25
更多知道相关问题>>
管道编程 - 飞翔的日志 - 网易博客
2009年3月20日 - 管道编程,飞翔的网易博客,flying in the sky...,我很执着,也有毅力,我相信我的前途一片光明!!
blog.163.com/tangmin92...  - 百度快照 - 88%好评
管道和socket编程_百度文库
2014年7月3日 - 管道和socket编程_计算机软件及应用_IT/计算机_专业资料。非常容易懂,有流程度,简单程序,新手很容易入门,个人心血力作……《Unix/linux 操作系统》课...
wenku.baidu.com/link?u...  - 84%好评
linux管道通信编程.pdf	评分:0/5	5页
在VC中使用Windows管道技术编程.doc	评分:0/5	3页
linux下使用c的管道编程.doc	评分:0/5	1页
更多文库相关文档>>
Linux管道编程实例_Linux编程_Linux公社-Linux系统门户网站
2011年6月4日 - /*管道 可以把管道想象为两个实体之间的单向连接器。注意,管道是半双工的, 如果需要全双工通讯,应该转而考虑套接字。
www.linuxidc.com/Linux...  - 百度快照 - 85%好评
管道编程 - Cs121 - 博客频道 - CSDN.NET
2010年12月28日 - 分类: LINUX 编程(9) 作者同类文章X 版权声明:本文为博主原创文章,未经博主允许不得转载。管道(有名)编程-是一种进程间的通信方式。未完... 一个典型...
blog.csdn.net/hjhcs121...  - 百度快照 - 88%好评
C 管道编程-luozhiyong131-ChinaUnix博客
2010年10月30日 - /*** 管道创建与读写 ***/ #include <stdlib.h> #include <stdio.h> #include <
blog.chinaunix.net/uid...  - 百度快照 - 80%好评
管道编程之pipe - c++语言程序开发技术文章_c++编程 - 红黑联盟
2013年4月24日 - pipe():创建一个新的匿名管道例子中子进程必须等待父进程写入管道之后才能读。thePipe[0]代表管道的输出,应用程序读它。thePipe[1]代表管道的输入,...
www.2cto.com/kf/201304...  - 百度快照 - 评价
相关搜索
windows管道编程		linux管道编程		c#管道编程
有名管道 编程		python 管道编程		c语言编程软件
管道设计		plc编程入门		java编程思想
1
2
3
4
5
6
7
8
9
10
下一页>
帮助举报给百度提建议
相关术语

c++

进程间通信

管道通信

void

静态变量

套接字

多线程

socket
相关函数

fscanf

strcpy

strcmp

fopen
